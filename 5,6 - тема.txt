5 - Тема


-Итератор  е поведенчески шаблон за дизайн, който се използва в
обектно-ориентираното програмиране. Итераторът предоставя
начин за последователен достъп до елементите на обект, без да е
нужна вътрешна информация за обекта. В компютърно програмиране,
итератор е обект, който дава възможност на програмиста да
преминава през структура от данни. Различни видове итератори
често са предоставяни чрез интерфейс контейнер.
 
 
-Kомпаратор е комбинационна логическа схема, която
осъществява сравнение на две числа. В резултат от
това регистрира едно от състоянията (= ; < ; >).
Компаратори, които могат да регистрират и трите състояния,
се наричат „магнитудни“ . Най-лесно компараторът се осъществява с
логическия елемент изключващо ИЛИ (XOR). При магнитудните
компаратори най-напред се сравняват най-старшите разряди; ако са различни, те определят резултата от сравнението.
Ако са равни се приравняват следващите разряди до достигане на резултат от сравняването. За увеличаване на разрядността на
компаратора се извършва нарастване, което може да бъде
последователно или паралелно. За по-голямо
бързодействие се използва последователно нарастване.
 
 
 
-Ламбда изразите представляват анонимни функции,
които съдържат изрази или
последователност от оператори. Всички ламбда изрази използват
ламбда оператора =>, който може да се чете като "отива в". Идеята за ламбда
изразите в C# е взаимствана от функционалните езици (например Haskell, Lisp, Scheme, F# и др.).
 Лявата страна на ламбда оператора определя входните
 параметри на анонимната функция, а дясната страна представлява
 израз или последователност от оператори, която работи с входните
 параметри и евентуално връща някакъв резултат.
Обикновено ламбда изразите се използват като
предикати или вместо делегати (променливи от тип функция), които
 се прилагат върху колекции, обработвайки елементите от колекцията
 по някакъв начин и/или връщайки определен резултат.
 
 
 
-В областта на програмирането, библиотеката е
колекция от помощни ресурси под формата на код и данни,
съхранявани в енергонезависимата памет, предназначени за
 използване от независими програми, например от операционната
система или от програми за разработка на софтуер. Това
 позволява споделяне и промяна на данни и код на модулен принцип.
 
 
 
 
-Изключение (exception) в програмирането в общия
случай представ­лява уведомление за дадено събитие,
нарушаващо нормалната работа на една програма. Изключенията
дават възможност необичайните събития да бъдат обработвани и
програ­мата да реагира на тях по някакъв начин. Когато възникне
изключение, конкрет­ното състояние на програмата се запазва и се
търси обработчик на изключението (exception handler).
Изключенията се предизвикват или "хвърлят" (throw an exception)
 от програмен код, който трябва да сигнализира на изпълняващата се
програма за грешка или необичайна ситуация. Например
 ако се опитваме да отворим файл, който не съществува, кодът,
който отваря файла, ще установи това и ще хвърли изключение с
подходящо съобщение за грешка.
 
 
 
 
-Потоците (streams) са важна част от всяка
входно-изходна библиотека. Те намират своето приложение,
 когато програмата трябва да "прочете" или "запише" данни от
 или във външен източник на данни – файл, други компютри, сървъри
 и т.н. Важно е да уточним, че терминът вход (input) се асоциира
с четенето на информация, а терминът изход (output) – със
записването на информация.


6 - Тема

Много често, когато пишем програми ни се налага да работим с множество от обекти (данни).
 Понякога добавяме и премахваме елементи,
 друг път искаме да ги подредим или да обработваме данните по друг специфичен начин.
 Поради това са изработени различни начини за съхранение на данните в зависимост от задачата,
 като най-често между елементите съществува някаква наредба (например обект А е преди обект Б).
В този момент на помощ ни идват структурите от данни – множество от данни организирани на основата на логически и математически закони.
 Много често изборът на правилната структура прави програмата много по-ефективна – можем да спестим памет и време за изпълнение.


Линейните структури от данни са списъци, стекове и опашки.
Линейният списък е редица от елементи от един и същи тип.
 Основни операции, които могат да бъдат извършвани с елементите, са добавяне и премахване.

линеен едносвързан списък – всеки елемент, с изключение на последния, е свързан със следващия с една връзка. Списъкът се обхожда от началото към края.
линеен двусвързан списък – всеки елемент, с изключение на последния, е свързан със следващия посредством две връзки. Това улеснява операциите. Например до елемент на списък лесно се стига в зависимост от това, дали е по-близо до началото или до края на списъка.
цикличен списък – двусвързан или едносвързан списък, при който последният елемент е и предшественик на първия. Тази реализация премахва условната поредност на елементи в списък и улеснява операциите с тях.
паралелен списък – Съвкупност от няколко списъка. Възможен е паралелен достъп до елементи от тях.
стек – в един стек елементи се добавят и премахват само от единия край, като се спазва правилото LIFO (last in first out – от англ. – „последният влязъл пръв излиза“), т.е. елементът, добавен най-скоро, е пръв при достъп до стека. Така операциите върху елементите биват ограничени
.
опашка – достъпът до елементи на опашка е също ограничен като при стек. Тук действа обаче правилото FIFO (first in, fisrt out – от англ. – „първият влязъл пръв излиза“), според което елементът,
 който най-дълго време е в опашката (е най-рано добавен), се обработва пръв.
 Добавянето на елементи става само от края на опашката, а премахването – от началото.

Bъвеждането на алгоритъм, който представлява начин за
 решаване на всеки проблем. Много е важно да се разбере
как обикновен човек, прилагащ алгоритъма навсякъде,
за да завърши всякаква работа в ежедневния живот, това е
много често и е много задължително, както и да завърши работата
 ефективно. Да предположим, че земеделски производител, продаващ
реколта на пазара и печелене на пари, ще има много случаи, когато
 земеделският производител ще помисли за най-добрия подход с
огромна печалба. Земеделският производител ще провери
 пазарната цена, размера на пазара, предлагането на търсенето
и фермерът ще мисли също как да продаде реколтата или на килограм,
 или на центал, за да реализира повече печалба тук, земеделският
 производител също прилага някаква логика и алгоритъм, за да
завърши работата неефективен начин да получете повече печалба
тези идеи идват от опита и предизвикателствата, пред които са
изправени същите или други фермери. В технически план, ако
говорим за всеки език за програмиране без алгоритъм, не е
възможно да се напише ефективна логика. Преди да напишем някаква
 логика на който и да е език за програмиране, трябва да помислим
 за следните неща.
 
 
-Стек се нарича списък, при който
добавянето на нови елементи, както и изключването, стават
 само от едната страна на списъка – върха на стека.
Мнемоника за запомняне на стек е LIFO (last in, first out).
Пример – пълнител на автомат. Пълнителят на автомат е вид стек.
Със сигурност най-мъжественият вид стек.
Опашка се нарича списък, при който всички включвания
 на нови елементи стават само от единия край на списъка
( край на опашката ), а изключването на елемент само от другия
край на списъка( начало на опашката ). FIFO( first in – first out )
Списъкът е наредена последнователност от краен брой еднотипни
 елементи. Всеки елемент се състои от полета, като данните
 в тях може да бъдат от различен тип – числови, текстови..
 Със списъците може да се изпълняват следните операции –
търсене на елемент по номер и осигуряване достъп до съдържанието
 му, включване на нов елемент на дадена позиция, изключване на
елемент с номер от списъка, обединяване на 2 или повече списъка
 в един, разбиване на списък на някокло отделни, създаване на
копие, определяне броя на елементите на списък, търсене на елемент
 с определено съдържание(по ключ), сориране. Същестуват различни начини за представяне на списъци в зависимост от вида на
 операциите над елементите. Основна характеристика на списъка е начинът, по който се осъществява достъпът до елементите му.
 Ако списъкът използва динамично заделяне на памет, той се нарича динамичен списък(иначе се нарича статичен. Масивите в C са статични списъци). Ако всеки елемент пази
указатели към предишния и следващия елемент, нарича се двусвързан списък, иначе - едносвързан. Естествено, има и далеч по-сложни видове списъци..

ok